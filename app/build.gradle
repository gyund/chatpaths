plugins {
	id 'com.android.application'
	id 'kotlin-android'
	id 'kotlin-kapt'
	id 'androidx.navigation.safeargs.kotlin'
	id 'dagger.hilt.android.plugin'

	id 'com.google.gms.google-services'
	id 'com.google.firebase.crashlytics'
	id 'com.google.android.gms.oss-licenses-plugin'
//	id 'com.google.devtools.ksp'
}

apply from: "$project.rootDir/common.gradle"

ext {
	// Year.Month.MajorVersion.patch
	app_version = getDate()
	app_major_version = 1
	app_version_code = 137
	app_version_name = "$app_version.$app_major_version.$app_version_code"

	storeFile = null
	storePassword = null
	keyAlias = null
	keyPassword = null

	def keystoreFilePropertyKey = "chatpathsKeyStoreFile"
	if (project.hasProperty(keystoreFilePropertyKey)) {
		storeFile = file(project.getProperty(keystoreFilePropertyKey))
		storePassword = project.getProperty("chatpathsKeyStorePassword")
		keyAlias = project.getProperty("chatpathsKeyStoreAlias")
		keyPassword = project.getProperty("chatpathsKeyStoreAliasPassword")
	}
}

static def getDate() {
	return new Date().format('yyyy.MM')
}

android {
	compileSdk 34

	signingConfigs {
		release {
			keyAlias project.keyAlias
			keyPassword project.keyPassword
			storeFile project.storeFile
			storePassword project.storePassword
		}
	}

//    lintOptions {
//        checkDependencies true
//    }

	defaultConfig {
		applicationId "com.gy.chatpaths.aac.app"
		// The Billing API must be 3+ and sdk 26 is 2.0
		minSdkVersion 27
		targetSdkVersion 34
		versionCode app_version_code
		versionName app_version_name
		resourceConfigurations += ['en', 'es', 'fr', 'hi']


		testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

		// The following argument makes the Android Test Orchestrator run its
		// "pm clear" command after each test invocation. This command ensures
		// that the app's state is completely cleared between tests.
		testInstrumentationRunnerArguments clearPackageData: 'true'

		javaCompileOptions {
			annotationProcessorOptions {
				arguments += [
						"room.schemaLocation":"$projectDir/schemas".toString(),
						"room.incremental":"true",
						"room.expandProjection":"true"]
			}
		}
		sourceSets {
			// Adds exported schema location as test app assets.
			androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
		}
	}
	testOptions {
		execution 'ANDROIDX_TEST_ORCHESTRATOR'
	}

	buildTypes {
		debug {
			testCoverageEnabled true
			pseudoLocalesEnabled true
			versionNameSuffix '.debug'
			manifestPlaceholders applicationName: 'ChatPaths Debug'
		}
		release {
			minifyEnabled true
			shrinkResources true
			signingConfig signingConfigs.release
			proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
			manifestPlaceholders applicationName: 'ChatPaths'
		}
	}
	buildFeatures {
		viewBinding true
		dataBinding = true
		buildConfig = true
	}
	compileOptions {
		sourceCompatibility JavaVersion.VERSION_17
		targetCompatibility JavaVersion.VERSION_17
	}
	kotlinOptions {
		jvmTarget = '17'
	}
	dynamicFeatures = []
	namespace 'com.gy.chatpaths.aac.app'
	flavorDimensions = ['google']
	productFlavors {
		WithoutFirebase {
			getIsDefault().set(true) // that does the magic
			dimension 'google'
		}
		WithFirebase {
			dimension 'google'
		}
	}
	lint {
		htmlReport true
		lintConfig file("$rootDir/lint.xml")
		xmlReport true
	}
}

dependencies {
	implementation fileTree(dir: "libs", include: ["*.jar"])
//	implementation libs.androidx.core.ktx
	implementation libs.androidx.appcompat
	implementation libs.androidx.core.splashscreen
	implementation libs.androidx.legacy.support.v4
	implementation libs.material
	implementation libs.androidx.constraintlayout
	implementation libs.androidx.navigation.fragment.ktx
	implementation libs.androidx.navigation.ui.ktx
	implementation libs.androidx.navigation.fragment.ktx
	implementation libs.androidx.navigation.ui.ktx
	implementation libs.androidx.navigation.dynamic.features.fragment
//	implementation project(path: ':modules:model')
	implementation libs.androidx.cardview
	implementation libs.androidx.recyclerview
	implementation libs.androidx.preference.ktx
	implementation libs.androidx.palette.ktx
	implementation libs.androidx.fragment.ktx
	implementation libs.androidx.viewpager2
	implementation libs.play.services.oss.licenses

	// In-app review
//	implementation libs.core
//	implementation libs.core.ktx
//	implementation project(path: ':modules:builder')
	implementation libs.review

	// For Kotlin users, also add the Kotlin extensions library for Play In-App Review:
	implementation libs.review.ktx


	testImplementation libs.junit
	testImplementation libs.androidx.truth
	androidTestImplementation libs.truth
	androidTestImplementation libs.truth.java8.extension
	androidTestImplementation libs.androidx.junit
	androidTestImplementation libs.androidx.espresso.core
	androidTestImplementation libs.androidx.runner
	androidTestUtil libs.androidx.orchestrator
	testImplementation libs.mockito.core
	androidTestImplementation libs.mockito.core
	androidTestImplementation libs.mockito.android

	// Lifecycle
	implementation libs.androidx.lifecycle.common.java8
	implementation libs.androidx.lifecycle.viewmodel.ktx
	implementation libs.androidx.lifecycle.livedata.ktx
	implementation libs.androidx.lifecycle.viewmodel.savedstate

	// Room Dependencies
	implementation libs.androidx.room.runtime
	kapt libs.androidx.room.compiler
	// For Kotlin use kapt instead of annotationProcessor
	implementation libs.androidx.room.ktx
	androidTestImplementation libs.androidx.room.testing

	// Firebase
	implementation platform(libs.firebase.bom)
	implementation libs.firebase.crashlytics
	implementation libs.firebase.analytics
	implementation libs.firebase.messaging
	implementation libs.firebase.config


	implementation libs.ucrop
//    implementation 'com.squareup.picasso:picasso:2.71828'

	// Onboarding
//    implementation 'com.github.AppIntro:AppIntro:6.1.0'
	implementation libs.material.tap.target.prompt

	implementation libs.hilt.android
	kapt libs.hilt.compiler


	// For instrumentation tests
	androidTestImplementation libs.hilt.android.testing
	kaptAndroidTest libs.hilt.compiler

	// For local unit tests
	testImplementation libs.hilt.android.testing
	kaptTest libs.hilt.compiler

	// Kotlin + coroutines
//    implementation 'androidx.work:work-runtime-ktx:2.7.0-alpha05'

	// optional - GCMNetworkManager support
	//implementation "androidx.work:work-gcm:$work_version"

	// optional - Test helpers
	androidTestImplementation libs.androidx.work.testing
//	implementation libs.androidx.core.ktx
	implementation libs.androidx.lifecycle.viewmodel.ktx
	implementation libs.kotlin.stdlib.jdk7
}

kapt {
	correctErrorTypes true
}
repositories {
	mavenCentral()
}
